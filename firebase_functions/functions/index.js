const request = require("request");
const functions = require("firebase-functions");
const admin = require("firebase-admin");
admin.initializeApp();

exports.createTestOnTestCompleted = functions.firestore.document(
    "test/{id}").onUpdate(
    (change, context) => {
      const newValue = change.after.data();
      const oldValue = change.before.data();

      const DEFAULT_IMAGE_SIZE = "400";
      const DEFAULT_NUM_QUESTIONS = 5;
      const DEFAULT_NUM_OPTIONS = 4;
      const path = "https://picsum.photos";

      /** creates a URL path to an image (randomly generated by picsum photos)*/
      async function createOption() {
        return new Promise((resolve, reject) => {
          request(`${path}/${DEFAULT_IMAGE_SIZE}`,
              (error, response) => {
                if (error) {
                  reject(new Error(
                      "failed to get picture ID from picsum website"));
                }
                resolve(response.headers["picsum-id"]);
              });
        }).then(
            (imageId) => {
              const option = `${path}/id/${imageId}/${DEFAULT_IMAGE_SIZE}`;
              return option;
            });
      }
      /** creates a PsiTest object */
      async function createTest() {
        try {
          const questions = [];
          const listOfPromises = [];
          for (let index = 0;
            index < DEFAULT_NUM_OPTIONS * DEFAULT_NUM_QUESTIONS; index++) {
            const promise = await createOption();
            listOfPromises.push(promise);
          }
          const listOfAllOptions = await Promise.all(listOfPromises);

          for (let i = 0; i < DEFAULT_NUM_QUESTIONS; i++) {
            const correctAnswer = Math.floor(Math.random() * 4);
            const options = [];
            for (let j = 0; j < DEFAULT_NUM_OPTIONS; j++) {
              options.push(listOfAllOptions[i + (j * DEFAULT_NUM_OPTIONS)]);
            }
            const newQuestion = {"options": options,
              "correctAnswer": correctAnswer};
            questions.push(newQuestion);
          }
          const test = {
            "parties": "",
            "questions": questions,
            "receiver": "",
            "sender": "",
            "status": "created",
          };
          return test;
        } catch (error) {
          return Error(error);
        }
      }
      let newTest;
      if (oldValue.status == "underway" && newValue.status == "completed") {
        // const activities = admin.firestore().collection("activities");
        // activities.add(
        //  { text: "a test's status changd from underway to completed" });

        createTest().then(
            (newTest) => {
              const testCollection = admin.firestore().collection("test");
              testCollection.add(newTest);
              return newTest;
            });
      }
      return newTest;
    });
